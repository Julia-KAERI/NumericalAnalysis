---
title: "Julia 언어와 수치해석"
---


이 사이트는 수치해석과 이미지 처리를 다룹니다. 실제 구현되는 코드는 julia 언어로 작성되었습니다. Julia 언어에 대해서는 [Introduction to Julia](https://julia-kaeri.github.io/IntroductionToJulia/) 를 참고하시기 바랍니다. 

이곳의 목적은 numpy 나 scipy, opencv 와 같이 이미 구현된 라이브러리를 사용하는 방법을 배우는 것이 아니라, 이 라이브러리의 함수나 기능들이 어떤 원리와 알고리즘으로 구현되는지를 알아보는 것입니다. 따라서 바닥부터 하나하나 쌓아 올리고자 합니다.

수치해석에 많이 사용되는 언어는 Fortran, C/C++, Python, Matlab, Julia 가 있습니다. 여기서는 수치 해석을 julia 언어로 구현하려고 하는데 수치해석을 julia 언어로 배우는 장점은 다음과 같습니다.

1. Julia 는 속도가 빠릅니다. 다른 무엇보다 `for` 나 `while` 루프가 빠릅니다. 가장 바람직한 경우에는 C/C++ 이나 fortran 에 비견할만한 속도가 나오며 Python 이나 Matlab 의 루프보다는 훨씬 빠릅니다. 멀티스레딩도 쉽게 사용 할 수 있습니다. 즉 여기서 구현된 코드가 어느 정도는 사용할 만큼의 속도가 나온다는 것입니다. 물론 많은 라이브러리들은 여러가지 최적화 기법을 사용하여 여기서 제시한 코드보다 훨씬 빠르게 동작합니다. 

2. C/C++ 보다 알고리즘의 표현력이 좋습니다. 보통 알고리즘은 언어 독립적인 유사 코드(pseudo code) 로 제시되는데 julia 의 코드와 이 유사 코드는 상당히 비슷하며 많은 경우 1-1 대응이 됩니다. 

3. Juia 는 Interpreter 언어입니다. 코드를 작성한 후 즉각적으로 테스트하고 확인할 수 있습니다. 물론 Python 이나 Matlab 으로도 수치 해석을 배울 수 있습니다. 그러나 numpy/scipy 나 cython, numba 등의 도움을 받지 않은 순수 파이썬 코드는 대부분의 경우 속도가 매우 느리며, numpy 등을 사용하는 경우는 수치해석을 배우는 것이 아니라 numpy 의 사용법을 배우게 됩니다. Matlab 의 경우도 유사합니다.


물론 실전에서는 다릅니다. Julia 의 대표적인 이미지 처리 패키지인 `Images.jl` 과 `OpenCV` 를 비교해보면 비룍 `OpenCV` 는 C++ 언어로 작성되었지만 Python 에서 구동시키는 `OpenCV` 보다 `Images.jl` 이 좋다고 말하기는 매우 힘들것입니다. 

