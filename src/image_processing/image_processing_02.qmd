---
title: "푸리에 변환을 이용한 이미지 처리"

number-sections: true
number-depth : 3
crossref:
  chapters: false
---
 
{{< include ../../latexmacros.qmd >}}

</br>

## 푸리에 급수와 푸리에 변환의 수학적 성질

푸리에 변환은 이미지 처리 뿐만 아니라 수치 해석에서도 아주 중요하기 때문에 여기서 확실하게 정리하기로 하자.

### 푸리에 급수
어떤 함수가 주기 $T$ 를 갖는다는 것은 모든 $t\in \mathbb{R}$ 에 대해 $f(t+T)=f(T)$ 임을 의미한다. 주기 $T$ 에 대해 $\nu = 1/T$ 를 **진동수(frequency)** 라고 하고 $\omega = 2\pi/T = 2\nu$ 를 **각진동수 (angular frequency)** 라고 한다. 이 경우 $f(t)$ 는 다음과 같이 표현 할 수 있다. 

::: {.callout-note appearance="simple" icon="false"}
::: {#def-fourier_series}

#### 실함수의 푸리에 급수

주기 $T$ 를 갖는 실함수 $f: X \subset \mathbb{R} \to \mathbb{R}$ 는 다음과 같은 푸리에 급수로 표현 할 수 있다. 여기서 $\omega = 2\pi/T$ 이다. 

$$
\begin{aligned}
f(t) &= \dfrac{a_0}{2} + \sum_{n=1}^{\infty} a_n \cos (n\omega t) + \sum_{n=1}^{\infty} b_n \sin (n \omega t)\,,\\
\text{where}\qquad  a_n &= \dfrac{2}{T}\int_{-T/2}^{T/2} f(t) \cos (n\omega t)\, dt\\
b_n &= \dfrac{2}{T}\int_{-T/2}^{T/2} f(t) \sin (n\omega t)\, dt.
\end{aligned}
$$

:::
:::



::: {.callout-note appearance="simple" icon="false"}
::: {#def-fourier_series_2}

#### 푸리에 급수

주기 $T$ 를 갖는 함수 $f(t)$ 는 다음과 같은 푸리에 급수로 표현 할 수 있다. 여기서 $\omega = 2\pi/T$ 이다. 

$$
\begin{aligned}
f(t) &= \sum_{n=-\infty}^{\infty} c_n e^{in\omega t}\,,\\
\text{where}\qquad c_n &= \dfrac{1}{T}\int_{-T/2}^{T/2} f(t) e^{-in\omega t}\, dt\,, \qquad n\in \mathbb{Z}
\end{aligned}
$$

:::
:::


</br>

@def-fourier_series 는 실함수의 경우, @def-fourier_series_2 는 실함수를 포함한 복소함수의 경우에 사용 할 수 있다. 아래 그림은 두가지 함수에 대한 푸리에 급수를 $n=1,\ldots,\,4$ 까지 표한 것이다. 


![푸리에 급수](imgs/fourier_expansion.png){#fig-ImageProcessing_fourier_series}


</br>

$[-T/2,\, T/2]$ 구간에서 연속인 함수의 집합 $X$ 를 생각하자. 이 집합은 벡터공간이다. 여기에 내적을 다음과 같이 정의한다. 

$$
\langle \phi,\, \psi \rangle = \int_{-T/2}^{T/2} \psi^\ast(t)\, \phi(t)\, dt
$$


수학적으로 푸리에 급수가 의미 있기 위해서는 $\omega = 2\pi/T$ 에 대해 $\{e^{in\omega t} : n\in \mathbb{Z}\}$ 가 $[T/2,\,T/2]$ 구간에서 연속인 모든 복소 함수의 집합에 대해 정규직교기저이어야 한다. 직교성은 보이기 쉽지만 completeness 즉, 주기 $T$ 인 모든 함수가 $\{\sin (n\omega t),\, \cos (n \omega t) : n \in \mathbb{Z}\}$ 의 선형결합으로 표현되는 것은 여기의 범위를 벗어난다. 단지 직교성과 completeness 를 알고 넘어가자.



### 기저함수의 직교성 {#sec-ImageProcessing_orthogonality_of_fourier_basis}

$$
\int_{-T/2}^{T/2} \exp \left( \dfrac{i 2\pi m}{T}t\right) \exp \left(-\dfrac{i 2\pi n}{T}t \right)\, dt = \delta_{nm}
$$ {#eq-ImageProcessing_orthogonality_of_fourier_basis}

<br>

### 주기함수와 푸리에 급수

- 모든 주기성을 갖는 연속함수는 푸리에 급수로 표현 할 수 있다.

</br>

## 푸리에 변환


::: {.callout-note appearance="simple" icon="false"}
::: {#def-fourier_transform}

### 1차원 푸리에 변환

함수 $f:\R \to \R$ 에 대한 푸리에 변환은 $\mathfrak{F}[f(t)]$ 로 쓰고 다음과 같이 정의된다. 푸리에 변환에 대한 역변환 $\mathfrak{F}^{-1}$ 도 아래와 같이 정의된다.

$$
\begin{aligned}
\mathfrak{F}\left[ f(t)\right] (\omega) &:= \int_{-\infty}^{\infty} f(t) \, e^{-2i\pi u t} \, dt,\\
\mathfrak{F}^{-1}[F(u)](t) &:= \int_{-\infty}^{\infty} F(u)\, e^{2i \pi u t} \, du\,.
\end{aligned}
$$

:::
:::


::: {.callout-note appearance="simple" icon="false"}
::: {#def-fourier_transform}

### 2차원 푸리에 변환

함수 $f:\R^2 \to \R$ 에 대한 푸리에 변환은 $\mathfrak{F}[f(x, y)]$ 로 쓰고 다음과 같이 정의된다. 푸리에 변환에 대한 역변환 $\mathfrak{F}^{-1}$ 도 아래와 같이 정의된다.

$$
\begin{aligned}
\mathfrak{F} \left[f(t)\right] (u,\,v) &:=\int_{-\infty}^{\infty}\int_{-\infty}^{\infty} f(x,\,y)e^{-2i\pi (ux+vy)}\, dxdy\,, \\
\mathfrak{F}^{-1} \left[F(u,\,v)\right](x,\,y) &:= \int_{-\infty}^{\infty} \int_{-\infty}^{\infty} F(u, v) e^{2i \pi (ux+vy)} \, dudv
\end{aligned}
$$

:::
:::

</br>

$F(u,\,v) = \mathfrak{F}[f](u,\,v)$ 는 복소수이므로 다음과 같이 표현 할 수 있다. 

$$
F(u,\,v) = |F(u,\,v)| e^{i\Phi(u,\,v)}
$$


이 때 $|F(u,\,v)|$ 를 **푸리에 스펙트럼 (Fourier spectrum)** 이라 하고, $\Phi(u,\,v)$ 를 **위상 (phase)** 이라 한다. 또한 $P(u,\,v) =|F(u,\,v)|^2$ 를 **푸리에 파워 스펙트럼 (Fourier power spectrum)** 이라 한다.

</br>


### 푸리에 변환의 몇가지 수학적 성질

2차원 푸리에 변환에 대해서 증명한다. 1차원에 대해서는 그 결과를 쉽게 유추 할 수 있다.

</br>
<div class="border" style="background-color:#FFF0F5 ;padding:5px;">

::: {#prp-fourier_linearity}

$F=\mathfrak{F}[f],\, G=\mathfrak{F}[g]$, 상수 $a,\,b$ 에 대해 다음이 성립한다.

**1. Linearity** : $\mathfrak{F}[af(x, y) + bg(x, y)] = aF(u,\, v) + bG(u,\,v)$, 

**2. Similarity** : $\mathfrak{F}[f(ax,\,by)] =\dfrac{1}{ab} F\left(\dfrac{u}{a},\, \dfrac{v}{b}\right)$, 

**3. Shift property** : $\mathfrak{F}[f(x-a,\, y-b)] = \exp (i2\pi (au+bv)) F(u,\,v)$, 

**4. Derivative** : $\mathfrak{F}\left[ \dfrac{d^k}{dx^k}f(x) \right] =( 2i\pi u)^k F(u)$,

:::

</div></br>

::: {.proof}

($1$)
$$
\begin{aligned}
\mathfrak{F}[af(x, y) + bg(x, y)]&= \iint (af(x, y) + bg(x, y)) e^{-2i\pi (ux+vy)}\, dxdy \\
&= \iint af(x, y)  e^{-2i\pi (ux+vy)}\, dxdy + \iint  bg(x, y) e^{-2i\pi (ux+vy)}\, dxdy  \\
&=  a\mathfrak{F}[f(x, y)] + b\mathfrak{F}[g(x, y)] \qquad \square
\end{aligned}
$$

($2$)
$$
\begin{aligned}
\mathfrak{F}[f(ax,\,by)] &= \iint f(ax,\, by) e^{-2i\pi (ux+vy)}\,dxdy \qquad &; t=ax,\, s=by\\
&= \dfrac{1}{ab} \iint f(s,\,t) e^{-2i \pi (ut/a+vs/b)}\, dtds \\
&= \dfrac{1}{ab} F \left(\dfrac{u}{a},\, \dfrac{v}{b} \right)
\end{aligned}
$$

($3$)
$$
\begin{aligned}
\mathfrak{F}[f(x-a,\, y-b) ]&= \iint f(x-a,\, y-b) e^{-2i\pi (ux+vy)} \,dxdy \qquad &; t=x-a,\, s=y-b\\
&=\iint f(t,\,s) e^{-2i\pi (ux+vy)} e^{2i\pi (au+bv)} \, dxdy \\
&= e^{2i\pi (au+bv)}F(u,\,v)
\end{aligned}
$$

($4$) $k=1$ 인 경우만 보이면 나머지는 쉽게 일반화 된다.$f(x)=\displaystyle \int_{-\infty}^{\infty} F(u)e^{2i\pi ux}\, du$ 이므로

$$
f'(x) =  \int_{-\infty}^{\infty}(2i\pi u) F(u)e^{2i \pi ux} \, du
$$

이다. 따라서 

$$
\mathfrak{F}[f'(x)] = (2i\pi u) F(u)
$$
이다. $\square$ 
:::

</br>

<div class="border" style="background-color:#F2F4F4  ;padding:5px;">

::: {#exm-fourier_transform_of_rect_fuction}

$\text{rect}\left(\dfrac{x}{w}\right)$ 함수의 푸리에 변환은 다음과 같다.

$$
\begin{aligned}
F(u) = \mathfrak{F}\left[\text{rect}\left(\dfrac{x}{w}\right)\right] &= \int_{-w/2}^{w/2} e^{-2\pi i u t}\, dt = \dfrac{\sin \pi w u}{\pi u}
\end{aligned}
$$

이것을 그래프로 그리면 아래 그림과 같다. 

![rect 함수의 푸리에 변환](imgs/fourier_of_rect.png){#fig-fourier_of_rect}

$\text{rect}\left(\dfrac{x}{w}\right)$ 함수의 폭은 $w$ 이다. 그리고 $F(u) =0$ 을 만족하는 주기는 $u=0$ 일 때를 제외하면 $1/w$ 이다. 즉 신호의 폭과, 푸리에 변환된 신호의 폭은 대략적으로 반비례 관계에 있다는 것을 알 수 있다. 


:::

</div>
</br>



</br>

### 주기적 임펄스 함수의 푸리에 변환

단위 임펄스 함수(디렉 델타 함수)가 $T$ 를 주기로 반복되는 함수를 주기적 임펄스 함수라 하며 이를 $S_T(t)$ 라 하자. 이는 주기함수이므로 푸리에 급수로 표현 할 수 있으며 다음과 같다. 

$$
\begin{aligned}
S_T(t) &= \sum_{n=-\infty}^{\infty} \delta \left(t-nT \right) =\dfrac{1}{T} \sum_{n=-\infty}^{\infty} \exp \left( \dfrac{-i2n\pi t}{T}\right)
\end{aligned}
$$

단일 임펄스 함수 $\delta(\mu-\mu_0)$ 에 대한 푸리에 변환은 다음과 같다.

$$
\mathfrak{F}[\delta (\mu-\mu_0)] = \int_{-\infty}^{\infty} \delta (\mu-\mu_0) e^{2i\pi \mu t}\, d\mu = e^{2i\pi \mu_0 t}
$$

따라서,

$$
\mathfrak{F}^{-1} \left[ \delta \left( \mu-\dfrac{n}{T} \right) \right] = \exp \left( \dfrac{2in\pi t}{t} \right) \iff \mathfrak{F}\left[  \exp \left( \dfrac{2in\pi t}{t} \right) \right] =  \delta \left( \mu-\dfrac{n}{T} \right)
$$

이다. 이를 이용하면 $s_T(t)$ 의 푸리에 변환식 $S(\mu)=\mathfrak{F}[s_N(t)]$ 를 계산 할 수 있으며 다음과 같다.

$$
S (\mu) = \mathfrak{F}\left[\dfrac{1}{T} \sum_{n=-\infty}^{\infty} \exp \left( \dfrac{-i2n\pi t}{T}\right)\right] = \dfrac{1}{T} \sum_{n=-\infty}^{\infty} \mathfrak{F}\left[ \exp \left( \dfrac{-i2n\pi t}{T}\right) \right] = \dfrac{1}{T} \sum_{n=-\infty}^{\infty} \delta \left(\mu - \dfrac{n}{T}\right)
$$

</br>

## 합성곱의 푸리에 변환

두 함수 $f(t),\, g(t)$ 의 convolution  $f(t) \ast g(t)$ 은 다음과 같이 정의된다.

$$
f(t) \ast g(t) := \int_{-\infty}^{\infty} f(\tau) g(t-\tau) \, d\tau
$$

$F(\mu)= \mathfrak{F}[f(t)],\, G(\mu)=\mathfrak{F}[g(t)]$ 라 할 때, $f(t)\ast g(t)$ 의 푸리에 변환을 구하면,

$$
\begin{aligned}
\mathfrak{F}[f(t) \ast g(t)] &= \int_{-\infty}^{\infty} \left[ \int_{-\infty}^{\infty} f(\tau)g(t-\tau) d\tau\right] e^{-2in\pi \mu t}\, dt \\
&= \int_{-\infty}^{\infty}f(\tau) \left[  \int_{-\infty}^{\infty} g(t-\tau)e^{-2in \pi \mu t}\, dt\right] \,d\tau \\
&= \int_{-\infty}^{\infty} f(\tau) G(\mu)e^{-2in \pi \mu \tau} \, d\tau \\
&= F(\mu)G(\mu)
\end{aligned}
$$


즉 합성곱의 푸리에 변환은 푸리에 변환의 곱이다. 이를 응용하면 두 함수의 곱의 푸리에변환은 합성곱이 됨을 보일 수 있다. 즉,

$$
\mathfrak{F}[f(t)g(t)]=F(\mu)\ast G(\mu)
$$

가 된다.

</br>

## 푸리에 변환과 샘플링 (sampling)

### 샘플링
임의의 연속함수 $f(t)$ 를 $T$ 를 주기로 샘플링 하였다고 하자. 그렇다면 이 샘플링 $\tilde{f}(t)$ 은 다음과 같은 식으로 표현 할 수 있다.

$$
\tilde{f}(t) = f(t)S_T(t)\sum_{n=-\infty}^{\infty} f(t) \delta (t-nT)
$$

즉 연속 신호에 대해 주기적으로 신호를 뽑아 불연속 신호로 만드는 것을 **sampling** 이라 한다. 

<br>

### 샘플링 된 신호의 푸리에 변환

이 때 $\mathfrak{F}[f(t)]= F(\mu),\, \mathfrak{F}[s_T(t)]= S(\mu)$ 라 하자 $\displaystyle S(\mu)=\dfrac{1}{T} \sum_{n=-\infty}^{\infty} \delta \left( \mu - \dfrac{n}{T}\right)$ 임은 알고 있다. 그렇다면 $\tilde{F}(\mu)=\mathfrak{I}\left[\tilde{f}(t) \right]$ 를 구하면,

$$
\begin{aligned}
\tilde{F}(\mu) & = F(\mu)\ast S(\mu) = \int_{-\infty}^{\infty} F(\tau)S(\mu-\tau)\, d\tau \\
&= \dfrac{1}{T} \sum_{n=-\infty}^{\infty}\int_{-\infty} F(\tau) \delta \left(\mu-\tau-\dfrac{n}{T}\right)\, d\tau \\
&= \dfrac{1}{T}\sum_{n=-\infty}^{\infty} F\left( \mu - \dfrac{n}{T} \right)
\end{aligned}
$$

이다. 즉, 주기 $T$ 로 샘플링된 연속 함수 $f(t)$의 함수의 푸리에 변환은 원래 함수의 푸리에 변환 $F(\mu)$ 를 주기 $1/T$ 를 갖는 임펄스 함수로 바꾼 형태임을 알 수 있다.

</br>

### 밴드-한계 신호 (band-limited signal), Over-sampling, under-sampling, critical-sampling, aliasing

- 위의 그림을 보자. 원본연속함수(연속신호) $f(t)$ 를 푸리에 변환한 함수 중, 그래프 (a) 와 같이 일부 구간 $[-\mu_M,\,\mu_M]$에 대한 변환 신호 $F(\mu)$ 만을 알고 있는 상황이라고 가정하자. 이렇계 특정 구간을 제외하고 $F(\mu)=0$ 일 때 이를 밴드한계신호라 한다.

- $f (t)$ 를 주기 $T$ 를 조절해 가며 샘플링한 함수를 푸리에 변환한다고 하자. 만약, 주기를 $1/T>2\mu_M$ 이 되도록 샘플링하면 $F(\mu)$ 가 주기적으로 배열되며 그간격은 $1/T$ 가 이되겠지만, $1/T>2\mu_M$ 이므로, 결과는 그림 (b) 와 같이 띄엄띄엄 배열된 삼각형 신호가 될 것이다. 즉 $\tilde{F}(\mu)$ 가 불연속 함수가 된다. 그러나 원래 $F(\mu)$ 가 가지고 있던 함수정보가 고스란히 남아 있으므로, 결과물로 부터 다시 역변환을 취하면 원래 함수 (신호값) 을 복원 할 수 있다. 이러한 결과를 **오버-샘플링 (over-sampling)** 이라 한다.

- 만약, 주기 조건이 $1/T < 2\mu_M$ 이라면 이번에도 $F(\mu)$ 가 주기적으로 배열되겠지만, $1/T < 2\mu_M$ 이므로, 결과는 그래프 (d) 처럼 삼각형 신호 중 일부가 파묻힌 결과가 될 것이다. 비록 $F(\mu)$ 는 연속 함수가 되었지만, 원래의 정보를 잃어 버리게 되며, 이러한 결과를 **언더-샘플링 (under-sampling)** 이라 한다.

- 만약 주기가 $1/T= 2\mu_M$ 로서 딱 맞다면, 그림 (c) 처럼, $F(\mu)$ 는 삼각형 신호가 제대로 연속 배열된 결과가 된다. 이러한 결과를 **critical-sampling** 이라 한다.

- 따라서 원래 함수의 신호를 복원하기 위한 샘플링 충분 조건은 $1/T\ge 2\mu_M$ 이 될 것이다. 이것은 소위 나이퀴스트-샤논 샘플링 정리의 결과이다.

- 이 정리에 따르면, 어떤 신호든 밴드-한계 함수가 그 함수의 샘플들로부터 복원되기 위해서는, 샘플링 주기의 역수$1/T$ 가 샘플링된 밴드의 최대값의 두 배보다 커야 한다. 만약, 주기의 역수가 이 조건을 만족시키지 못한다면 (즉, 언더-샘플링된 상황), 복원된 신호는 완벽하지 않을 것이며, 이러한 상황을 **주파수 앨리어싱 (frequency aliasing)** 혹은 그냥 **앨리어싱** 이라고 한다.

- 앨리어싱은 주로 원래 이미지의 해상도보다 낮은 해상도로 이미지를 샘플링하거나, 이미지 획득 장치의 샘플링 간격이 피사체 자체의 고유 구조 특징보다 더 클 때 발생합니다.

</br>


## 이산 푸리에 변환 (Discrete Fourier Transformation, DFT)


### 1차원 DFT

1차원 공간상의 함수 $f$ 에 대해 $k$ 번째 에서의 값을 $f_k$ 라 하자. 그리고 이 수열을 $\langle f\rangle$ 라 하자. 즉,
$$
\langle f \rangle =(f_1,\ldots,\,f_{N})
$$

이다. 우리는 여기서 한가지 가정을 하게 되는데 $f$ 이 주기 $N$ 을 갖는다는 것이다. 즉 $f_{k+N}=f_k$ 이다. 예를 들어 $(1, 3, 2, 4)$ 에 대한 이산 푸리에 변환은 

$$
\ldots , \underline{1, 3, 2 , 4}, 1, 3,2,4, \underline{1, 3, 2,4},\ldots
$$

에 대한 푸리에 변환이라는 의미이다 (주기적으로 반복되는 것을 잘 보이게 하기 위해 밑줄로 표현하였다). $N$ 개의 데이터가 $N$ 의 주기로 반복되기 때문에 전체적으로 주기는 $0, 1,\ldots,\, N-1$ 이며, 이 때 $\mathfrak{F}[f]=\langle F\rangle = (F_1,\ldots,\,F_{N})$ 의 $F_u$ 는 다음과 같이 구할 수 있다.

$$
F_u = \mathfrak{F}[f]_u=\dfrac{1}{N} \sum_{k=1}^{N} f_k \exp\left(-\dfrac{i2\pi (u-1) }{N} (k-1) \right).
$$

위의 식, 그리고 아래에서 에서 $(u-1)$ 이라던가 $(n-1)$ 같은 약간 어색한 항이 있는 이유는 우리가 앞으로 사용할 이산 푸리에 변환 라이브러리가 C/C++ 언어 기반이며, 따라서 인덱스가 0 부터 시작하기 때문이다. 


또한 $f_k$ 는 다음과 같이 표현 할 수 있다.

$$
f_k = \mathfrak{F}^{-1}[F]_k = \sum_{u=1}^{N} F_u \exp \left(\dfrac{i2\pi (k-1)}{N} (u-1) \right)
$$

</br>

이제 푸리에 변환과 역변환을 통해 $f_k$ 를 복원 할 수 있음을 보이자. 증명을 좀 더 깔끔하게 하기 위해 $\sum_{1}^N$ 을 $\sum_{0}^{N-1}$ 로 바꾸었다.

$$
\begin{aligned}
f_{k'} = \mathfrak{F}^{-1}[F]_{k'} &=  \sum_{u=0}^{N-1} F_u \exp \left(\dfrac{i2\pi k'u}{N}  \right) \\
&= \dfrac{1}{N}\sum_{u=0}^{N-1} \left[\sum_{k=0}^{N-1} f_k \exp \left(\dfrac{-i2\pi k u}{N}  \right)  \right]\exp \left(\dfrac{i2\pi k'u}{N} \right)  \\
&= \dfrac{1}{N}\sum_{k=0}^{N-1} f_k \sum_{u=0}^{N-1} \exp\left( \dfrac{2\pi i (k'-k)u}{N}  \right) \\
% &= \dfrac{1}{N}\sum_{k=0}^{N-1} f_k \dfrac{{1-\exp \left( \dfrac{2\pi i (k'-k) N}{N}\right)}}{1-\exp \left( \dfrac{2\pi i (k'-k)}{N}\right)}
\end{aligned}
$$

우리는 여기서 $k'=k$ 이면 $\sum_{u=0}^{N-1} \exp (\cdots )= N$ 임을 안다. $k'\ne k$ 라면 $|k'-k|\le N-1$ 이므로

$$
\sum_{u=0}^{N-1} \exp\left( \dfrac{2\pi i (k'-k)u}{N}  \right) = \dfrac{{1-\exp \left( \dfrac{2\pi i (k'-k) N}{N}\right)}}{1-\exp \left( \dfrac{2\pi i (k'-k)}{N}\right)} = 0
$$

이며, 이로부터 $\mathfrak{F}^{-1}[F]_{k} = f_k$ 을 얻었다. 즉 DFT 로도 푸리에 변환과 역변환이 똑같이 성립한다. 

</br>

우리는 위의 식으로 부터 다음을 알 수 있다.

- 푸리에 변환으로 얻는 $F_u = \mathfrak{F}[f_k]$ 의 변수 $u$ 는 각진동수(angular frequency) 이다. 따라서 이 신호를 진동수(frequency) 에 대한 신호로 바꾸고 싶다면 변수를 $2\pi u$ 로 변경시켜야 한다.

- 입력되는 신호 $f$ 가 실수 신호더라도 푸리에 변환 신호는 복소수가 된다. 각진동수에 대한 분포를 알고싶다면 $|F_u|$ 를 보아야 한다. Julia 에서는 `abs` 함수가 복소수에 대한 절대값을 반환한다.



다음은 1차원 DFT 와 IDFT 를 julia 로 구현한 것이다. 1차원 벡터 `x` 에 대해 `dft(x)` 나 `idft(x)` 와 같이 사용한다. 하지만 아래의 코드는 앞으로 사용하지 않는다. 그 이유는 곧 밝힌다.

```julia
function _dft(
    f::Vector{T}, 
    inverse = false) where T<:Union{Real, Complex}
    
    N = length(f)
    if T <:AbstractFloat
        F = zeros(Complex{T}, N)
    elseif T<:Complex 
        F = zeros(eltype(f), N)
    else 
        F = zeros(Complex{Float64}, N)
    end

    if inverse
        for i in 1:N
            F[i] = [f[k] * exp(2.0im * π* (i-1) * (k-1)/N) for k ∈ 1:N]./N |> sum
        end
    else     
        for i in 1:N
            F[i] = [f[k] * exp(-2.0im * π* (i-1) * (k-1)/N) for k ∈ 1:N] |> sum
        end
    end

    return F
end

dft = v-> _dft(v, false)
idft = v-> _dft(v, true)
```
</br>

참고로 정수 $k,\, N$ 에 대해 $1 = e^{-i2\pi } = e^{-i 2 \pi N(k-1)/N}$ 이므로 

$$
\begin{aligned}
F_{-u} &= \dfrac{1}{N} \sum_{k=1}^N f_k \exp \left( \dfrac{i 2 \pi (u +1)(k-1) }{N}\right) \\
&= \dfrac{1}{N} \sum_{k=1}^N f_k \exp \left( \dfrac{i 2 \pi (u +1)(k-1) }{N}\right) \exp \left( \dfrac{-i 2 \pi N (k-1)}{N} \right) \\
&= \dfrac{1}{N} \sum_{k=1}^Nf_k \exp \left( \dfrac{i 2 \pi (N-u-1)(k-1)}{N}\right) \\
&= F_{N-u}
\end{aligned}
$$

이다. 이때문에 $u$ 의 범위를 $1\le u \le N$ 로 표현하는 것보다 $N$ 이 홀수일 때는 $-\dfrac{N-1}{2} \le u \le \dfrac{N-1}{2}$ 로, $N$ 이 짝수일 때는 $-\dfrac{N}{2} \le u \le \dfrac{N}{2}-1$ 로 관례적으로 표현한다. 



### 2차원 DFT

2차원 DFT 의 경우 $F(u, v)$ 는 아래와 같이 구할 수 있다.

$$
\begin{aligned}
F_{uv} &= \dfrac{1}{MN} \sum_{j=1}^{M}\sum_{k=1}^{N} f_{jk} \exp \left[-2i\pi \left(\dfrac{(j-1)(u-1)}{M}+\dfrac{(k-1)(v-1)}{N}\right)\right] \\
f_{jk} &=  \sum_{j=1}^{M}\sum_{k=1}^{N} F_{uv} \exp \left[2i\pi \left(\dfrac{(j-1)(u-1)}{M}+\dfrac{(k-1)(v-1)}{N}\right)\right]
\end{aligned}
$$

여기서도 $\mathfrak{F}^{-1}\left[\mathfrak{F}[f]\right] = f$ 와 $\mathfrak{F}\left[\mathfrak{F}^{-1}[F]\right]=F$ 가 성립한다. 



</br>

### 연속 푸리에 변환과의 관계에서 보는 DFT 의 성질.

<br>

**1. 주기성** : 연속 푸리에 변환은 앞서 보았듯이 아래와 같다. 

$$
\begin{aligned}
F(u,\,v) &= \mathfrak{I} \left[f(x,\,y)\right]=\int_{-\infty}^{\infty}\int_{-\infty}^{\infty} f(x,\,y)e^{-2i\pi (ux+vy)}\, dxdy\,, \\
f (x,\,y) &= \mathfrak{I}^{-1} \left[F(u,\,v)\right] = \int_{-\infty}^{\infty} \int_{-\infty}^{\infty} F(\mu) e^{2i \pi (ux+vy)} \, dudv
\end{aligned}
$$

불연속 푸리에 변환쌍 에서는 $x, y$ 대신 $x/N, y/M$가,그리고 $u,v$  대신 $u/N, v/M$ 가 쓰였다. 이는 원본 함수가 정해진 구간 $x = 0,\,1,\ldots,\,N-1$ 혹은 $y=1,\ldots,\,M-1$ 을 벗어나면 다시 주기 $N, M$ 을 가지고 모든 1차원 공간에서 반복된다는 가정이 내포되어 있다. 즉,
정수 $p,\,q$ 에 대해

$$
\begin{aligned}
f(x+pN,\, y+qN) &= f(x,\, y) \\
F(u+pN,\, v+qN) &= F(u,\, v)
\end{aligned}
$$
가 성립한다는 뜻이다.

<br>

**2. 정규화 인자 (normalization factor)** : 또한, $F(u,\,v)$ 의 계수에 연속 푸리에 변환에는 없던 $\dfrac{1}{NM}$ 가 생긴것을 볼 수 있다.우리가 다루는 이미지 같은 신호는 공간상에서 제약이 있고 (즉, 가로와 세로의 길이가 정해져 있고), 또한 신호들은 불연속적으로 나열되어 있으므로, 이를 푸리에 변환 과정에서 보상하기 위해, $F (u,\,v)$ 의 계수에 $\dfrac{1}{MN}$ 가 정규화 인자 (normalization factor)로서 생긴 것이다.

</br>


## 고속 푸리에 변환 (FFT)


고속 푸리에 변환(Fast Fourier Transform, FFT)은 DFT 과 그 역변환을 빠르게 수행하는 효율적인 알고리즘이다. 위의 이산 푸리에 변환은 $N^2$ 번의 곱셉과 $N(N-1)$ 번의 덧셈 연산, 즉 대략 $2N^2$ 번의 연산이 필요하지만 FFT를 이용하면 대략 $\mathcal{O}(N \log_2 N)$ 의 연산만으로 가능하다. 기본적인 아이디어는 가우스가 생각했었으나 잊혀졌고 이후 Cooley 와 Tukey 가 1965년도에 고속 푸리에 변환 알고리즘을 발표하였으며 이후 전 세계적으로 광범위하게 사용되었으며 다양한 다른 방법들도 개발되었다. 여기서는 Cooley 와 Turkey 의 기본적인 알고리즘을 알아보기로 하자.

</br>

### 기본적인 아이디어 {#sec-ImageProcessing_FFT_basic_idea}

우선 $N=2^n$ 일 경우에 대해 생각하자. 그리고 우리는 $f_k$ 의 인덱스 $k$ 를 $1\le k \le N$ 에서 생각했지만 여기서는 $0\le k \le N-1$ 로 생각하자. 이 경우, 

$$
\mathfrak{F}[f]_u=\dfrac{1}{N}\sum_{k=0}^{N-1} f_k e^{-2 \pi i ku /N},\qquad u=0,\ldots,N-1
$$
이다. $k=0,\ldots,\,N-1$ 에 대해 $(f_k)$ 의 짝수 인덱스만 모아 수열 $(a_k)$ 를 만들고 홀수 인덱스만 모아 수열 $(b_k)$ 를 만든다. 

$$
\begin{aligned}
a_k &= f_{2k}, \\
b_k &= f_{2k+1} 
\end{aligned}
$$

이렇게 하면 

$$
(f_k) = (a_0,\,b_0,\,a_1,\,b_1,\ldots,\, a_{N/2-2},\, b_{N/2-2},\, a_{N/2-1},\, b_{N/2-1})
$$

이다. $w_N := e^{-2\pi i /N},\, M=N/2=2^{n-1}$ 이라고 하면 ${w_N}^2 = w_M = e^{-2\pi i /M} = e^{-2\pi i /(N/2)}$ 이며, 이를 이용하여 $\mathfrak{F}_u$ 를 계산하면 아래와 같다.

$$
\begin{aligned}
\mathfrak{F}[f]_u &= \sum_{k=0}^{N-1} f_k e^{-2\pi i uk/N} =  \sum_{k=0}^{N-1}f_k {w_N}^{uk} \\
&= \sum_{k=0}^{M-1}a_k {w_N}^{2uk} + \sum_{k=0}^{M-1} b_k {w_N}^{(2k+1)u}\\
&= \sum_{k=0}^{M-1} a_k (w_M)^{uk} + \left({w_N}^u\right) \sum_{k=0}^{M-1} b_k (w_M)^{uk} \\
\end{aligned}
$$ {#eq-ImageProcessing_fft_1}

이다. $M-1$ 개의 점에 대한 $(a_k)$ 와 $(b_k)$ 의 푸리에 변환 $\mathfrak{F}[a]_u,\, \mathfrak{F}[b]_u$ 를 생각하자.  $0 \le u \le M-1$ 일 경우

$$
\mathfrak{F}[f]_{u} = \mathfrak{F}[a]_u + ({w_N}^u) \mathfrak{F}[b]_u
$${#eq-ImageProcessing_fft_2}

이며, $M\le u \le N-1$ 일 경우 $v=u-M$ 으로 놓고 ${w_N}^{-M} = (e^{-2\pi i /N})^{-M} = e^{i\pi} = -1$ 과 ${w_M}^M=1$ 을 이용하면, 


$$
\begin{aligned}
\mathfrak{F}[f]_{M \le u \le N-1} &= \sum_{k=0}^{M-1} a_k (w_M)^{uk} + ({w_N}^u) \sum_{k=0}^{M-1} b_k (w_M)^{uk} \\
&= \sum_{k=0}^{M-1}a_k (w_M)^{vk} (w_M)^{Mk} + (w_N)^{v}(w_N)^M \sum_{k=0}^{M-1}b_k (w_M)(w_M)^{vk} (w_M)^{Mk} \\
&= \sum_{k=0}^{M-1} a_k (w_M)^{vk} - ({w_N}^v) \sum_{k=0}^{M-1} b_k (w_M)^{vk} \\
&= \mathfrak{F}[a]_{u-M} - ({w_N}^{u-M}) \mathfrak{F}[b]_{u-M}
\end{aligned}
$${#eq-ImageProcessing_fft_3}

이다. 즉 $1\le u\le M$ 에 대해

$$
\begin{aligned}
\mathfrak{F}[f]_u &= \mathfrak{F}[a]_u + ({w_N}^u) \mathfrak{F}[b]_u, \\[0.3em]
\mathfrak{F}[f]_{u+M} &= \mathfrak{F}[a]_u - ({w_N}^u) \mathfrak{F}[b]_u, 
\end{aligned}
$${#eq-ImageProcessing_fft_4}

이다. 우리는 $N=2^n$ 개의 점에 대한 DFT 가 $M=N/2$ 인 두 푸리에 변환의 선형결합과 같다는 것을 알게 되었다. 만약 $N$ 개의 점에 대한 DFT 의 연산 횟수를 $X(N)$ 이라고 하자. $N=2^n$ 일 때 $N/2=2^{n-1}$ 개의 점에 대한 두번의 DFT 와 $(w_N^m)$ 과 $\mathfrak{F}[b]_u$ 와의 $N/2$ 번의 곱셈 연산이 필요하므로 

$$
\begin{aligned}
X(N=2^n) &= 2X(2^{n-1}) + 2^{n-1} \\
&= 2(2X(2^{n-2}) + 2^{n-2}) + 2^{n-1}\\
&\qquad \vdots \\
&= 2^{n-1} X(2^1) + (n-1)2^{n-1}
\end{aligned}
$$

$N=2$ 일 때 $X(2^1)=X(2)=4$ 이므로 

$$
X(2^n) = 2^{n+1} + (n-1)2^{n-1} \approx n 2^{n} = 2^n \log_2 (2^n) = N \log_2(N)
$$

이다. 즉 $N=2^n$ 개의 점에 대해 대략 $N \log_2 (N)$ 번의 연산을 통해 DFT 를 수행 할 수 있다. 

</br>

## 2차원 불연속 푸리에 변환 (2D DFT)을 이용한 이미지 처리

Julia 는 복소수 타입 배열이 존재하지만 OpenCV 의 `Mat` 은 복소수 타입을 사용 할 수 없으며, `OpenCV` 는 내부적으로 3차원 행렬의 첫번째 차원을 실수로, 두번째 차원을 허수로 하여 복소수 행렬을 다룬다. OpenCV 에서는 2 채널 배열이라고 한다. 기본적으로 푸리에 변환은 부동소수 타입이 되어야 하기 때문에 푸리에 변환을 하기 전에 정수 타입의 이미지 행렬을 실수 타입으로 바꾸어 주어야 한다. 아래의 `cvConvertTo(img0, Float32)` 는 `OpenCV.Mat{UInt8}` 타입의 배열을 `OpenCV.Mat{Float32}` 타입으로 바꾸어주는 함수로 직접 코딩하였다. 


```julia
function cvConvertTo(mat::OpenCV.Mat, t::T) where T<:Type
    return cv.Mat(convert.(t, mat.data))
end

img0= img2mat(testimage("cameraman.tif"));
img1 = cvConvertTo(img0, Float32)
ft1 = cv.dft(img1, flags=cv.DFT_COMPLEX_OUTPUT);
```

`cv.dft` 즉 `OpenCV.dft` 가 2차원 이산 푸리에 변환을 수행하는 함수이며 `flag=cv.DFT_COMPLEX_OUTPUT` 은 푸리에 변환의 결과를 복소수를 표현하는 2채널 행렬로 반환하라는 의미이다.

물론 `FFTW.jl` 과 같은 julia 의 FFT 패키지를 사용 할 수도 있지만 이 경우 `OpenCV.Mat` 을 juila 배열로 변환하고 푸리에 변환 이후에 다시 `OpenCV.Mat` 으로 변환시켜야 하기 때문에 여기서는 다소 번거롭더라도 `OpenCV.dft` 를 사용하였다.


</br>

.... fftshfit 에 관한 내용 을 채워야 한다...




</br>

### Ideal Low Pass Filtering

2D DFT 행렬을 DC 인자를 중앙에 배치하여 재배열했을 경우, 원본 이미지에서 낮은 픽셀 빈도를 갖는 성분은 중앙 (즉, $(u,v) \approx (0,0)$) 근처 에 모이게 된다. 낮은 빈도를 갖는다는 것은 공간 상에서 신호 주기가 크다는 의미고, 역공간에서는 ‘1/주기’가 작은 값으로 대응이 될 것이므로, $(u, v)$ 가 중앙 부분으로 몰리게 되는 것이다. 따라서, 원본 이미지의 로우-패스 필터링을 하고 싶다면, 푸리에 변환 된 행렬의 중앙 부분만 따로 골라내어 다시 역변환하면 될 것이다.

가장 간단히 생각 할 수 있는 방법은 원점 주위의 특정 반경 안에 들어오는 2D DFT 이미지만 뽑아 역변환 해주는 것이며 이를 ideal low pass filtering 이라 한다.

</br>

### Ideal High Pass Filtering

Ideal low pass filtering 과 반대로 생각해 주면 된다. 

</br>

### 버터워스 필터링 (Butterworth filtering)

Ideal low/high pass filter 는 계단 함수 형태로, 그 과정에서 물결무늬 같은 원하지 않는 패턴이 생성된 것도 확인할 수 있었다. 이러한 부작용을 방지하기 위해 컷오프 거리를 기준으로 로우-패스 혹은 하이-패스 영역을 설정하는 방식을 계단 함수가 아닌, 조금 더 부드러운 연속 함수로 바꿀 수 있다. 그중 하나가 버터위스 필터링으로 다음과 같이 정의된다.

$$
\begin{aligned}
\text{Low pass filter } h(u,\,v) &= \dfrac{1}{1+\left( 1+\dfrac{(u^2+d^2)^{1/2}}{D} \right)^{2n}} \\
\text{High pass filter } h(u,\,v) &= \dfrac{1}{1+\left(1+\dfrac{D}{(u^2+d^2)^{1/2}}\right)^{2n}} 
\end{aligned}
$$


</br>

### Gaussian Filtering

</br>

### 위상 보존 필터 (zero-phase-shift filter), 위상 비보존 필터 (Nonzero-phase-shift filter)

우리는 지금까지 원본 이미지 $f(x,\,y)$의 역공간 $F(u,\,v)$ 에서 작업해 왔다. $F(u,\,v)$ 는 복소함수로 실수부 $R(u,\,v)$ 와 허수부 $I(u,\,v)$ 가 존재하여 $F(u,\,v) = R(u,\,v) +iI(u,\,v)$ 이다. 이 때 $\arctan \left( \dfrac{I(u,\,v)}{R(u,\,v)}\right)$ 를 $F(u,\,v)$ 의 위상이라고 한다. 

만약 어떤 필터에 의해 위상이 변하지 않는다면 이를 **위상 보존 필터**라 하고, 그렇지 않다면 **위상 비보존 필터** 라 한다.

</br>

### 밴드삭제 필터링, 놋치 필터링.

</br>

### Periodic noise reduction - Bragg filtering

</br>

### Deblurring using inverse filtering

잘 안됨... 더 알아 봐야 할 듯..