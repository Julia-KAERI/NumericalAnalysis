---
title: "다항식을 이용한 1차원 보간법"

number-sections: true
number-depth : 3
crossref:
  chapters: false
---

{{< include ../../latexmacros.qmd >}}

</br>

## 바이어슈트라스 근사정리

이산적인 데이터 $(x_1,\,y_1),\,(x_2,\,y_2),\ldots,\, (x_N,\, y_N)$ 가 주어졌으며 $x_1<x_2<\cdots <x_N$ 으로 정렬되어 있다고 하자. 이 때 주어진 데이터를 바탕으로 임의의 $x$ 값을 추측할 경우, $x_1 \le x \le x_N$ 의 $x$ 값에 대해 추측하는 것을 보간법(interpolation) 이라 하고, $x<x_1$ 이거나 $x >x_N$ 일 경우 추축하는것을 외삽법(extrapolation) 이라 한다. 여기서는 보간법에 대해 다루기로 한다. 기본적으로 여기서 다루는 보간법은 데이터를 다항식으로 근사시키는데, 이 방법은 아래의 바이어스트라스 근사 정리(Weierstrass approximation theorem)로 정당화된다.  

</br>

<div class="border" style="background-color:#FFF0F5 ;padding:5px;">

::: {#thm-Weierstrass_approximation_theorem}

#### 바이어슈트라스 근사 정리

함수 $f : X \subset \mathbb{R} \to \mathbb{R}$ 가 $[a,\,b] \subset I$ 구간에서 연속일 때, 임의의 $\varepsilon > 0$ 에 대해

$$
|f(x)-P(x)|<\varepsilon,\qquad \forall x\in [a,\,b]
$$

인 다항식 $P(x)$ 가 항상 존재한다. 
:::

</div>

</br>

이 정리에 대한 증명은 해석학(Analysis) 교과서(예를 들면, Terrence Tao의 해석학 교과서 2권) 를 참고하라.

</br>

## 다항식을 이용한 전역적 보간법 {#sec-global_interpolation_using_polynomial}

전역적 보간법은 전체 데이터를 하나의 다항식으로 표현하는 방법이며, 후술할 국소적 보간법은 구하고자 하는 값 주위의 몇개의 데이터만을 이용하여 국소적으로 다항식으로 표현한다. 여기서는 $n+1$ 개의 데이터 $\{ (x_i,\, y_i): i=1,\ldots,\,n\}$ 이 주어졌으며 $i\ne j \implies x_i \ne x_j$ 일 때, 즉 어떤 두 $x_i,\,x_j$ 도 같지 않을 경우에 대해, 이 점을 모두 지나는 $n-1$ 차 다항식은 유일하게 정해진다는 사실을 이용하여 $n-1$ 차 다항식을 구하는 방법을 설명한다. 이 다항식을 구하는 방법은 방데르몽드(Vandermond) 방법, 라그랑쥬(Lagrange) 방법, 뉴턴(Newton) 방법 등이 있다

</br>

### 발데르몽드 방법 {#sec-interpolation_valdermond_method}

다항식을 다음과 같이 놓는다.
$$
V_{n} (x) = a_0 + a_1 x + \cdots + a_{n-1}x^{n-1}
$$ 

이 때 $V_{n} (x_i)= y_i$ 이므로 아래와 같은 선형방정식 $\boldsymbol{Va}=\boldsymbol{y}$ 을 통해 계수 $a_0,\ldots,\,a_{n-1}$ 을 구할 수 있다.

$$
\underbrace{\begin{bmatrix} 1 & x_1 & x_1^2 & \cdots & x_1^{n-1} \\ 1 & x_2 & x_2^2 & \cdots & x_2^{n-1} \\ \vdots & & & & \vdots \\ 1 & x_n & x_n^2 & \cdots & x_n^{n-1}\end{bmatrix}}_{{\Large \boldsymbol{V}}} \underbrace{\begin{bmatrix}a_0 \\ a_1 \\ \vdots \\ a_{n-1}\end{bmatrix}}_{{\Large \boldsymbol{a}}} = \underbrace{ \begin{bmatrix}y_1 \\ y_2 \\ \vdots \\ y_n\end{bmatrix}}_{{\Large\boldsymbol{y}}}
$$ {#eq-vandermond_matrix}


</br>
<div class="border" style="background-color:#F0FFFF  ;padding:5px;">

::: {#exr-determinant_of_valdermond_matrix}
위의 $\boldsymbol{V}$ 와 같이 주어진 발데르몽드 행렬의 행렬식은 다음과 같음이 잘 알려져 있다. 

$$
\det(\boldsymbol{V}) = \prod_{1\le i<j\le n} (x_j-x_i) 
$$

즉 어떤 두 $x_i,\,x_j$ 같지 않으면 행렬식은 $0$ 이 아니므로 가역행렬이다. 따라서 $a_0,\ldots,\,a_{n-1}$ 이 유일하게 정해진다.
:::

</div>
</br>

데이터로 부터 행렬 $\boldsymbol{V}$ 와 벡터 $\boldsymbol{y}$ 를 구할 수 있으며, 어떤 두 $x_i,\,x_j$ 도 같지 않으므로 선형방정식의 풀이를 통해 다항식의 계수 벡터 $\boldsymbol{a}$ 를 구할 수 있다.

</br>

#### **구현**

발데르몽드 행렬을 생성하는 가장 직관적이고 이해하기 쉬운 코드는 다음과 같다. `xp` 가 배열 $x_1,\ldots,\,x_n$ 에 대한 변수라고 하자.

```julia
V = Array{Float64}(undef, length(xp), length(xp))

for (i, x) in enumerate(xp), j in eachindex(xp)
    V[i, j] = x^(j-1)
end
```

그러나 가장 효율적인 코드, 특히 `xp` 의 크기가 클 때 효율적인 코드는 array comprehension 을 사용하는 것이다.

```julia
V = [x^(j-1) for x in xp, j in 1:length(xp)]
```

이렇게 생성된 `V` 와 데이터로 알고 있는 $y_1,\ldots,\, y_n$ 에 대한 배열 `yp` 에 대해 다항식은


```julia
SimplePolynomial(V\yp)
```

로 구할 수 있다. 이것은 `NAJ.jl` 의 `valdermond_polynomial` 함수로 구현되었다.

``` {.julia code-line-numbers="true"}
function valdermond_polynomial(
    xp::AbstractVector{T1}, 
    yp::AbstractVector{T2}
    ) where {T1<:Number, T2<:Number}
    
    N = length(xp)
    @assert length(xp) == length(yp)
    V = [x^(j-1) for x in xp, j in 1:length(xp)]
    return SimplePolynomial(V\yp)
end
```

```txt
In [1]: using NAJ

In [2]: p1 = valdermond_polynomial([1,2,3,4], [1,3,4,7])
Out[2]: Simple Polynomial{Float64}( -5.0  + 9.0 x^1 - 3.5 x^2 + 0.5 x^3)
```

</br>

### 라그랑쥬 다항식을 이용한 보간법 {#sec-interpolation_lagrange}

가장 직관적으로 이해하기 쉬운 라그랑쥬 방법을 알아보자. $n$ 개의 데이터 $\{(x_i,\,y_i):i=1,\ldots\, n\}$ 에 대해 함수 $l_k(x)$ 를 다음과 같이 정의하자.

$$
\begin{aligned}
l_k (x) &:= \prod_{i=1,\, i \ne k}^n \dfrac{(x-x_i)}{(x_k-x_i)} \\
&= \dfrac{(x-x_1)\cdots (x-x_{k-1})(x-x_{k+1})\cdots (x-x_n)}{(x_k-x_1)\cdots (x_k-x_{k-1})(x_k-x_{k+1})\cdots (x_k-x_n)}.
\end{aligned}
$$ {#eq-lagrange_interpolation_function}

이 다항식은 다음을 만족한다.

$$
l_k (x_j) = \delta_{xj} = \left\{ \begin{array}{ll} 1 \qquad & j=k,\\ 0 \qquad &\text{otherwise} \end{array}\right.
$$

다항식 $L_n(x)$ 를 다음과 같이 정의하자.

$$
L_{n}(x) := \sum_{k=1}^n y_k \, l_k(x)
$$ {#eq-Lagrange_polynomial}

그렇다면 $i=1,\ldots,\,n$ 에 대해 $L_{n}(x_i)=y_i$ 인 것은 쉽게 알 수 있다. 즉 $L_{n} (x)$ 는 주어진 점들을 모두 지나는 다항식이다. 이 다항식 $L_{n}(x)$ 를 라그랑쥬 다항식이라고 한다.


#### **구현**

라그랑쥬 다항식은 다음과 같이 구현 할 수 있다.

```{.julia code-line-numbers="true"}
function lagrange_polynomial(
    xp::AbstractVector{T1}, 
    yp::AbstractVector{T2}) where {T1<:Number, T2<:Number}

    N = length(xp)
    @assert length(xp) == length(yp)
    
    r = SimplePolynomial([zero(T2), ])
    for i in 1:N
        coef = yp[i]
        rt = one(T2)
        for j in 1:N
            if i ≠ j
                @inbounds coef = coef/(xp[i]-xp[j])
                @inbounds rt = rt*SimplePolynomial([-xp[j], 1.0])
            end
        end
        r += rt*coef
    end
    return r
end
```
</br>

```txt
In [1]: using NAJ

In [2]: p2 = lagrange_polynomial([1,2,3,4], [2,4,1,8])
Out[2]: Simple Polynomial{Float64}( -20.0  + 37.0 x^1 - 17.5 x^2 + 2.5 x^3)
```

</br>


### 뉴턴 보간법 {#sec-interpolation_newton}

뉴턴 보간법은 $n$ 개의 데이터 $\{ (x_i,\, y_i): i=1,\ldots,\,n\}$ 를 지나는 $n-1$ 차 다항식을 
$$
\begin{aligned}
N_{n}(x) & = a_0 + a_1 (x-x_1)+ a_2 (x-x_1)(x-x_2)+ \cdots \\
& \qquad + a_{n-1}(x-x_1)\cdots (x-x_{n-1})
\end{aligned}
$${#eq-Newton_polynomial}

으로 두고 그 계수 $a_0,\,a_1,\ldots,\,a_{n-1}$ 을 찾는다. 우선 $n_k(x)$ 를 아래와 같이 정의하자.
$$
n_k (x) := \left\{ \begin{array}{ll} 1 & \text{if }k=0 \\ \displaystyle \prod_{i=1}^k (x-x_i) &\text{if }k\ne 0\end{array}\right.
$$ {#eq-Newton_basis_polynomial}

이 $n_k(x)$ 를 **뉴턴 기저 다항식** 이라 한다. 뉴턴 다항식 $N_n (x)$ 는 다음과 같다.

$$
N_{n}(x) = \sum_{k=0}^{n-1} a_k n_k (x).
$$ 

이 때 $N_n(x_1)=a_1= y_1$ 이며, $k=1,\ldots,\, n-1$ 에 대해 

$$
a_k = \dfrac{y_{k+1} - a_1 - a_2(x_{k+1}-x_1) - \cdots - a_{k-1}(x_{k+1}-x_1)\cdots (x_{k+1}-x_k)}{(x_{k+1}-x_1)\cdots (x_{k+1}-x_k)}
$$

임을 알 수 있다. 이것을 아래와 같은 선형방정식 $\boldsymbol{Na}=\boldsymbol{y}$ 를 통해 표현 할 수 있다.


$$
\underbrace{\begin{bmatrix} 1 & 0 & 0 & \cdots & 0 \\ 1 & n_1(x_2) & 0 & \cdots & 0 \\ 1 & n_1(x_3) & n_2(x_3) & \cdots & 0 \\ \vdots & \vdots & \vdots & \ddots & \vdots \\ 1 & n_{n-1}(x_n) & \cdots & \cdots & n_{n-1}(x_n)  \end{bmatrix}}
_{{\Large \boldsymbol{N}}}
\underbrace{\begin{bmatrix} a_0 \\ a_1 \\ a_2 \\ \vdots \\ a_{n-1}\end{bmatrix}}_{{\Large \boldsymbol{a}}} =
\underbrace{\begin{bmatrix} y_1 \\ y_2 \\ y_3 \\ \vdots \\y_n \end{bmatrix}}_{{\Large \boldsymbol{y}}}.
$$ {#eq-newton_polynomial_matrix}

뉴턴 보간법을 행렬로 표현하는 $\boldsymbol{N}$ 은 하삼각행렬로 방데르몽드 방법이나, 라그랑쥬 방법에 의한 보간법보다 그 계수를 구하는 것이 빠르고 수치해석적으로 안정적이다.


</br>

#### **구현**

```{.julia code-line-numbers="true"}
function newton_polynomial(
    xp::AbstractVector{T1}, 
    yp::AbstractVector{T2}) where {T1<:Number, T2<:Number}
    n = length(xp)    
    @assert n == length(yp)
    T = promote_type(T1, T2)
    N = LowerTriangular(ones(T, n, n))
    for j in 2:n, i in j:n
        @inbounds N[i, j] = N[i, j-1]*(xp[i] - xp[j-1]) 
    end
    a = N\yp
    r = SimplePolynomial([a[1], ])
    for i in 2:(n)
        @inbounds r += a[i] * polynomial_from_roots(xp[1:i-1])
    end
    return r

end
```

```txt
In [1]: using NAJ

In [2]: p3 = newton_polynomial([1,2,3,4], [2,4,1,8])
Out[2]: Simple Polynomial{Float64}( -20.0  + 37.0 x^1 - 17.5 x^2 + 2.5 x^3)
```

</br>


#### **세 방법의 비교**

주어진 점에 대해 보간하는 세가지 방법은 수학적으로 동등하지만 수치해석적으로는 뉴턴 방법을 권장하는데 그 이유는 다음과 같다.

1. 일반적으로 라그랑쥬 다항식보다 뉴턴 다항식을 빠르게 계산 할 수 있다.

2. $n$ 개의 데이터에 대해 다항식을 구한 후 데이터를 추가할 때 라그랑쥬 다항식은 모든 계수를 다시 계산해야 하지만 뉴턴 다항식은 위의 이미 알고 있는 계수와 점들을 를 이용하여 계산할 수 있다. 여기서는 새로운 점을 추가하는 것을 구현하지는 않았다.

3. 데이터가 어느 정도 많이 주어졌을 때 라그랑쥬 다항식보다 뉴턴 다항식이 수치해석적으로 안정하다.


</br>

### 다항식을 이용한 보간법의 오차 {#sec-error_for_polynomial_interpolation}

<div class="border" style="background-color:#FFF0F5 ;padding:5px;">

::: {#prp-roll_theorem_many_x0}

$f\in C^{n}[a,\,b]$ 이고 $\{x_1,\ldots,\,x_n\}\subset [a,\,b]$ 이며 $i\ne j \implies x_i \ne x_j$ 라고 하자. $P_{n-1}(x)$ 가 $P_{n-1}(x_i) = f(x_i)$ ($i=1,\ldots,\,n$) 인 $n-1$ 차 다항식이라면

$$
f(x) - P_{n-1}(x) = \dfrac{f^{(n)}(\xi)}{n!} \prod_{j=1}^n (x-x_j)
$$

를 만족하는 $\xi \in [a,\,b]$ 가 존재한다.

:::

</div>

</br>

::: {.proof}

$F(t)$ 를 다음과 같이 정의하자.

$$
F(t) = f(t) - P_{n-1} (t) - (f(x)-P_{n-1} (x)) \prod_{i=1}^n \dfrac{(t-x_i)}{(x-x_i)} \tag{1}
$$

이 때 $t=x_k,\, k=1,\ldots,\, n$ 에 대해 $F(x_k)=0$ 이다. 또한 

$$
F(x) = f(x)-P_{n-1}(x) - (f(x)-P_{n-1}(x)) = 0
$$

이므로 $x,\,x_1,\ldots,\,x_n$ 의 $n+1$ 개의 점에서 $F(t)=0$ 이 된다. [일반화된 롤의 정리](06_calculus_of_one_variable_function.qmd#sec-generalized_roll_theorem)
를 이용하면 $n$ 개의 점에서 $F'(t)=0$ 이며, 이것을 반복하면 $F^{(n)}(\xi)=0$ 을 만족하는 $\xi\in [a,\,b]$ 가 존재한다. 그런데 $P_{n-1}(x)$ 는 $n-1$ 차 다항식이므로 $P_{n-1}^{(n)} (x)=0$ 이며 ($1$) 의 $\displaystyle \prod_{i=1}^n \dfrac{(t-x_i)}{(x-x_i)}$ 에 대한 $n$ 차 미분은

$$
\dfrac{d^n}{dt^n} \left(\prod_{i=1}^n \dfrac{(t-x_i)}{(x-x_i)}\right) = \dfrac{n!}{\prod_{i=1}^n (x-x_i)}
$$

이므로,

$$
F^{(n)}(\xi) = f^{(n)}(\xi) - (f(x)-P_{n-1} (x))\dfrac{n!}{\prod_{i=1}^n (x-x_i)} = 0
$$

이다. 즉

$$
f(x) = P_{n-1}(x) + \dfrac{f^{(n)}(\xi)}{n!}\prod_{i=1}^n (x-x_i)
$$

를 만족하는 $\xi \in [a,\,b]$ 가 존재한다. $\square$
:::



</br>

### 전역적 보간법의 문제점

데이터 갯수가 많을 경우 고차다항식으로 보간을 하게 되는데, 이 경우 다항식이 심하게 진동하는 경우가 있을 수 있다. 아래 그림의 데이터는 15개의 포인트로 가우스 분포 $e^{-(x-x_0)/2\sigma^2}$ 를 그린 것이며, 라그랑쥬나 뉴턴 방법을 통해 14차 다항식으로 보간한 결과를 같이 보여준다.

![Oscilating behavior](figure/interpolation_oscillation.png){#fig-interpolation_oscillation_1 width=100%}

게다가 데이터 갯수가 상당히 많으면 수치적으로 불안정해 진다. 예를 들어, 25개의 데이터에 대한 가우스 분포를 다항식으로 보간하면 아래와 같이 더 이상 사용할 수 없는 결과가 발생한다.

![Oscilating behavior2](figure/interpolation_oscillation2.png){#fig-interpolation_oscillation_2 width=100%}

참고로 위의 그림에서 라그랑제 방법이나 뉴턴 방법에 의한 차이는 방법의 고유한 성질에 의한 차이가 아니라 계산 과정에서 발생하는 것으로 같은 방법을 사용했다고 하더라도 구현에 따라 다른 모습으로 나타 날 수 있다. 


</br>

## 네빌 방법 (Neville's Method) {#sec-Neville_method}

우리가 이산적인 데이터를 다항식으로 보간한다고 할 때, 많은 경우 보간된 다항식 자체에 관심있는 것이 아니라 데이터에 포함되지 않지만 데이터의 범위 안에 들어가는 몇몇 점에서 보간된 값만을 얻고 싶을 때가 있다. 이 경우 사용할 수 있는 것이 네빌 방법이다. 즉 다항식을 이용한 전역적인 보간법에서의 세 방법이 $\{(x_i,\,y_i): i=1,\ldots,\,n\}$ 를 모두 지나는 $n-1$ 차 다항식을 구하는 방법이라면 네빌 방법은 다항식을 직접 구한다기 보다는 다항식으로 보간했을 때의 값만을 구하는 방법이다. 



$n$ 개의 데이터 $\{(x_i,\,y_i): i=1,\ldots,\,n\}$ 가 주어졌다고 하자. 우리가 어쨋든 $x_k,\ldots,\,x_{m-1}$ 에서 각각 $y_k,\ldots,\,y_{m-1}$ 과 일치하는 $P_{k,\ldots,\,m-1}(x)$ 과 $x_{k+1},\ldots,\,x_{m}$ 에서 각각 $y_{k+1},\ldots,\,y_{m}$ 과 일치하는 $P_{k+1,\ldots,\,m}$ 을 알고 있다고 하자. 그렇다면 아래의 식으로부터 구한 $P_{k,\ldots,\,m}$ 은 $x_k,\ldots,\,x_m$ 에서 $y_k,\ldots,\,y_m$ 과 일치한다.

$$
P_{k,\ldots,\,m}(x) = \dfrac{(x-x_k)P_{k+1,\ldots,m}(x) - (x-x_m)P_{k,\ldots,\,m-1}(x)}{x_m-x_k}
$$ {#eq-maskter_formula_for_neville_method}




4 개의 점 $\{(x_1,\,y_1),\ldots,\,(x_4,\,y_4)\}$ 으로 이루어진 데이터를 다항식으로 보간한다고 생각하자. 각 $P_i(x)$ 는 $y_i$ 의 값을 갖는 상수함수로 놓는다. $P_1,\,P_2,\,P_3,\,P_4$ 를 이용하여 $P_{1,\,2}$, $P_{2,\,3}$, $P_{3,4}$ 를 계산하며, 이를 이용하여 $P_{1,2,3}$ 와 $P_{2,3,4}$ 를 계산한다. 마지막으로 이를 이용하여 $P_{1,2,3,4}$ 를 계산하면 종료된다.  

|회차 | 1| 2 | 3| 4| 
|:---:|:---:|:---:|:---:|:---:|
| $x_1$ | $P_1 (x)$ |  | | | 
| |  |  $P_{1, 2} (x)$| | |
| $x_2$ | $P_2 (x)$| | $P_{1, 2, 3} (x)$ | |
| | | $P_{2, 3} (x)$| | $P_{1, 2, 3, 4} (x)$ |
| $x_3$ |$P_3 (x)$ | | $P_{2, 3, 4} (x)$ | |
| | |$P_{3, 4} (x)$ | | |
| $x_4$ | $P_4 (x)$| | | |
: {tbl-colwidths="[30, 30, 30, 30, 30]" .striped .hover}


</br>


### 구현

네빌 방법에 대한 코드는 아래와 같다. Julia 의 배열 comprehension 방법을 사용하였기 때문에 한번에 이해하기 어려울 수 있다는 것에 주의하라.

```{.julia code-line-numbers="true"}
function neville(
    xp::AbstractVector{T1}, 
    yp::AbstractVector{T2}, 
    x::Real) where {T1<:Real, T2<:Real}
    @assert length(xp) == length(yp)
    P = copy(yp)
    for i in 1:(length(xp)-1)
        P = [((x-xp[j+i])*P[j] - (x-xp[j])*P[j+1])/(xp[j]-xp[j+i]) for j in 1:(length(xp)-i)]
    end
    return P[1]
end
```

</br> 

## 다항식을 이용한 구간별 보간법 {#sec-local_interpolation_using_polynomial}

앞서의 전역적 보간법은 주어진 전체 데이터를 이용한 보간법인데 반해 지금 소개하는 보간법은 구하고자 하는 변수값 근처의 몇개의 점만을 이용하여 다항식으로 보간한다. 따라서 전역적 보간법에서 보이는 진동이 없으며, 데이터가 많더라도 사용 할 수 있다.

</br>

### 최근접 보간법 (Nearest Neighbor Interpolation)

가장 간단한 보간법 은 최근접 보간법 (nearest neighbor interpolation) 으로 $x_1,\ldots,\,x_N$ 가운데 $x$ 값에 가장 가까운 값을 취하는 방법이다. 즉 $x_i\le x<x_{i+1}$ 일 때 $x_i$ 와 $x_{i+1}$ 중 $x$ 와의 거리가 더 가까운 값을 $f(x)$ 로 선택하는 방법이다. 가장 단순하면서도 빠르지만 보간법의 결과로 나온 함수는 연속함수가 아니다.

</br>

### 선형 보간법 (Linear Interpolation)

$x_{i}\le x < x_{i+1}$ 일 때 $(x_i,\,y_i)$ 와 $(x_{i+1},\, y_{i+1})$ 의 두 점을 지나는 직선 $l_i (x)$ 는 다음과 같다.

$$
l_i (x) = \dfrac{y_{i+1}-y_i}{x_{+1}-x_i} (x-x_i) + y_i
$$ {#eq-linear_interpolation}

이 직선 $l_i(x)$ 값으로 $f(x)$ 값을 추산하는 것을 선형보간법이라 한다. 선형 보간법으로 구한 함수는 연속이지만 일반적으로 미분가능하지 않다.

</br>

### 삼차함수 보간법 (Cubic interpolation)

$x_{i}\le x< x_{i+1}$ 일 때 $(x_{i-1},\, y_{i-1})$, $(x_i,\,y_{i})$, $(x_{i+1},\,y_{i+1})$, $(x_{i+2},\, y_{i+2})$ 를 이용하여 3차함수를 구하여 보간한다. 보간하는 함수는 앞서 언급한 발데르몽드, 라그랑쥬, 뉴턴 방식중에 사용할 수 있으며, 여기서는 뉴턴 다항식을 이용하여 보간하도록 한다. $(x_{i-1},\, y_{i-1})$, $(x_i,\,y_{i})$, $(x_{i+1},\,y_{i+1})$, $(x_{i+2},\, y_{i+2})$ 를 이용하여 구한 3차 다항식을 $N_i(x)$ 라고 하면 $x_1\le x<x_2$ 일 경우에는 $x_0$ 가 없으므로 $N_1(x)$ 를 이용하며, $x_{N-1}\le x \le x_{N}$ 일 경우에는 $N_{N-2}$ 를 이용하여 보간한다. 삼차함수 보간법을 사용하여 구한 함수는 연속이며 선형 보간법보다 나은 결과를 보여주지만 역시 미분 가능하지 않다.

일단 위의 세가지를 julia 로 구현해 보자. $x_1,\ldots,\,x_n$ 과 $y_1,\ldots,\,y_n$ 이 각각 벡터 `xp`, `yp` 라고 하고 $x_1 < x_2 < \cdots < x_n$ 임을 가정하자. 

```{.julia code-line-numbers="true"}
"""
    nearest neighbor interpolation
"""
function interp_nearest(
    xp::AbstractVector{T}, 
    yp::Vector{S}, 
    x::AbstractVector{R}
    ) where {T<:Real, S<:Real, R<:Real}
    
    @assert length(xp) == length(yp)
    N = length(xp)
    result = zeros(x)
    for (i, v) in enumerate(x)
        if v<xp[1] || v>xp[end]
            result[i] = zero(T)
        else 
            ind = findfirst(xs->(xs>=v), xp)-1
            if ind == 0
                result[i]=yp[1]
            elseif v-xp[ind] > xp[ind+1]-v
                result[i] = yp[ind+1]
            else 
                result[i] = yp[ind]
            end
        end
    end
    return result
end

"""
    linear interpolation
"""
function interp_linear(xp::AbstractVector{T}, yp::Vector{S}, x::AbstractVector{R}) where {T<:Real, S<:Real, R<:Real}
    @assert length(xp) == length(yp)
    N = length(xp)
    result = zero(x)
    for (i, v) in enumerate(x)
        if v<xp[1] || v>xp[end]
            result[i] = zero(T)
        else 
            ind = findfirst(xs->(xs>=v), xp)-1
            if ind == 0
                result[i] = yp[1]
            else
                result[i] = (yp[ind+1]-yp[ind])/(xp[ind+1]-xp[ind])*(v-xp[ind]) + yp[ind]
            end
        end
    end
    return result
end

"""
    cubic interpolation
"""
function interp_cubic(xp::AbstractVector{T}, yp::Vector{S}, x::AbstractVector{R}) where {T<:Real, S<:Real, R<:Real}
    @assert length(xp) == length(yp)
    N = length(xp)
    result = zero(x)
    for (i, v) in enumerate(x)
        
        if v<xp[1] || v>xp[end]
            result[i] = zero(T)
        else 
            ind = findfirst(xs->(xs>=v), xp)-1
            if ind ∈ (0, 1)
                xs, ys = xp[1:4], yp[1:4]
            elseif ind ∈ (N, N-1)
                xs, ys = xp[end-3:end], yp[end-3:end]
            else 
                xs, ys = xp[ind-1:ind+2], yp[ind-1:ind+2]
            end
            result[i] = newton_polynomial(xp, yp)(v)
        end
    end
    return result
end
```

</br>

이것을 다음 코드로 확인해 보았다.


```julia
using Plots
xp = 0.0:1.0:15.0 
yp = cos.(xp) .* exp.(-xp/10.0)
xt = collect(0.0:0.1:15.0) 
scatter(xp, yp, label = L"\cos \theta", dpi=300)
plot!(xt, interp_nearest(xp, yp, xt), lw=2, lc=:red, label=L"\mathrm{Nearest}")
plot!(xt, interp_linear(xp, yp, xt), lw=2, lc=:blue, label=L"\mathrm{Linear}")
plot!(xt, interp_cubic(xp, yp, xt), lw=2, lc=:green, label=L"\mathrm{Cubic}")
```

</br>

![Interpolation](figure/Interpolation.png){#fig-interpolation_3 width=100%}

</br>



### Cubic Spline Interpolation 

위에서 설명한 세가지 보간법은 연속이 아니거나 연속이더라도 미분 가능하지 않았다. Spline 보간법은 보간하고자 하는 구간 내에서 미분가능한 함수를 구해준다.

$n$ 개의 데이터 $\{(x_i,\,y_i): i=1,\ldots,\,n\}$ 에 대해 $[x_i,\,x_{i+1}]$ 구간을 보간하는 다항식을 $s_i(x)$ 라 하자. 이 때 각각의 $s_i(x)$ 를 3차 다항식으로 하고


$$
\begin{aligned}
s_i(x_{i}) & = y_{i}\\
s_i(x_{i+1}) &= y_{i+1}\\
s'_i(x_{i+1}) &= s'_{i+1}(x_{i+1}) \\
s''_i(x_{i+1}) &= s''_{i+1}(x_{i+1})
\end{aligned}
$$ {#eq-cubic_spline_condition_1}
을 만족하도록 보간하는 것을 cubic spline interpolation 이라 한다. $[x_i,\,x_{i+1}]$ 구간에서의 삼차함수 $s_i(x)$ 를
$$
s_{i}(x) = a_i + b_i x + c_ix^2 + d_i x^3
$$

이라 하자. $s_i(x)$ 에 대한 일계 도함수와 이계 도함수는

$$
\begin{aligned}
s'_i (x) &= b_i + 2c_i x + 3d_i x^2,\\
s''_{i}(x) &= 2c_i + 6d_ix
\end{aligned}
$$

이므로, $a_{i-1},\,b_{i-1},\, c_{i-1},\, d_{i-1}$ 로부터

$$
\begin{array}{c}
a_i + b_i x_{i}+ c_i(x_{i})^2+ d_{i} (x_{i})^3 = y_{i} \\
a_i + b_i x_{i+1}+ c_i(x_{i+1})^2+ d_{i} (x_{i+1})^3 = y_{i+1} \\
b_i + 2c_i (x_{i+1})+ 3d_i (x_{i+1})^2 =b_{i+1} + 2c_{i+1} (x_{i+1})+ 3d_{i+1} (x_{i+1})^2 \\
2c_i + 6d_ix_{i+1} = 2c_{i+1}+ 6d_{i+1}x_{i+1}
\end{array}
$$ {#eq-cubic_spline_condition_2}

의 조건을 얻었으며, 이를 통해 $a_i,\,b_i,\,c_i,\,d_i$ 를 구할 수 있다. 위 식에서 아래의 두 식은 $i=1$ 일 때 사용 할 수 없으므로 우리는 추가로 조건을 두어야 한다. 이 때 보통 아래와 같은 2가지의 경계조건 가운데 선택한다.

1. Free or natural boundary: $s''_1 (x_1) = s''_{n-1} (x_n) = 0$

2. Clamped boundary: $s'_1(x_1) = f'(x_0),\, s'_{n-1} (x_n) = f'(x_n)$

Clampled boundary 일 경우 $f'(x_0),\, f'(x_n)$ 값은 주어져야 한다.

</br>

$n-1$ 개의 구간에 대해 각각 4 개의 변수를 결정해야 하므로 미지수 행렬을 $4(n-1)\times 1$ 행렬 $\boldsymbol{a}$ 으로 두자. $j=1,\ldots,\,n-1$ 에 대해 

$$
a_{4j-3} = a_j, \, a_{4j-2} = b_j, \, a_{4j-1} = c_j,\, a_{4j} = d_j
$$

라고 하면 미지수 전체에 대한 행렬이다. 이제 주어진 데이터와 미지수와의 관계를 이용하여 선형방정식 $\boldsymbol{Ma}=\boldsymbol{b}$ 를 만들자. 이 때 $\boldsymbol{M}$ 은 $4(n-1) \times 4(n-1)$ 행렬이다. $j=1,\ldots,\, n-1$ 에 대해 $\boldsymbol{M}$ 의 $4(j-1)+1$ 행부터 $4(j-1)+4$ 행까지, $4(j-1)+1$ 열부터 $4(j-1)+8$ 열까지의 $4 \times 8$ 부분행렬을 $\boldsymbol{M}_j$ 라고 하자. 위의 조건 @eq-cubic_spline_condition_2 으로부터 $\boldsymbol{M}_j$ 가 포함하지 않는 성분은 모두 $0$ 임을 알 수 있다. $i=1,\ldots, n-2$ 에 대해 $\boldsymbol{M}_i$ 는 다음과 같다.
$$
\boldsymbol{M}_j = \begin{bmatrix} 
1 & x_i & (x_i)^2 & (x_i)^3 & 0 & 0 & 0 & 0\\
1 & x_{i+1} & (x_{i+1})^2 & (x_{i+1})^3 & 0 & 0 & 0 & 0\\
0 & 1 & 2x_{i+1} & 3(x_{i+1})^2 & 0 & -1 & -2 x_{i+1} & -3(x_{i+1})^3\\
0 & 0 & 2 & 6x_{i+1} & 0 & 0 & -2 & -6x_{i+1}
\end{bmatrix}
$$

$x_{n+1}$ 은 주어져 있지 않으므로 $\boldsymbol{M}_{n-1}$ 은 $2 \times 8$ 행렬이며 다음과 같다.

$$\boldsymbol{M}_{n-1} = \begin{bmatrix} 
1 & x_{n-1} & (x_{n-1})^2 & (x_{n-1})^3 & 0 & 0 & 0 & 0\\
1 & x_{n} & (x_{n})^2 & (x_{n})^3 & 0 & 0 & 0 & 0\\
\end{bmatrix}
$$


또한 역시 @eq-cubic_spline_condition_2 로 부터 $4(n-1)\times 1$ 행렬 $\boldsymbol{y}$ 는 $i=1,\ldots,\,n$ 에 대해 다음과 같이 정할 수 있다.

$$
b_{4j-3}= y_i, \, b_{4j-2}= y_{i+1},\, b_{4j-1} = 0,\, b_{4j}= 0
$$


이제 $\boldsymbol{M}$ 의 마지막 두 행을 경계조건에 따라 정해야 한다.

</br>

#### **Free boundary** 

우선 첫번째 경계조건이 주어졌을 경우
$$
\begin{aligned}
s''_1 (x_1)=0 &\implies 2c_1+ 6 d_1 (x_1)=0, \\
s''_{n-1}(x_n) = 0 &\implies 2c_{n-1} + 6d_{n-1}(x_n) = 0
\end{aligned}
$$

를 얻는다. 이 조건으로부터,

$$
M_{4n-5, 3}=2,\, M_{4n-5, 4}= 6x_1,\, M_{4n-4, 4n-5} = 2,\, M_{4n-4, 4n-4} = 6x_n
$$

을 얻는다. 

</br>

#### **Clamped boundary**

$$
\begin{aligned}
s'_1 (x_1)=f'(x_0) &\implies b_1 + 2c_1(x_1)+ 3d_1 (x_1)^2=f'(x_0), \\
s'_{n-1}(x_n) = f'(x_n) &\implies b_{n-1}+ 2c_{n-1}(x_n) + 3d_{n-1}(x_n)^2 = f'(x_n)
\end{aligned}
$$

를 얻는다. 이 조건으로부터,

$$
\begin{aligned}
M_{4n-5, 2}=1,\, M_{4n-5, 3}=2x_1,\, M_{4n-5, 4} = 3(x_1)^2,\, b_{4n-5}=f'(x_0), \\
M_{4n-4, 4n-6}=1,\, M_{4n-4, 4n-5}=2x_n,\, M_{4n-4,4n-4}=3(x_n)^2,\, b_{4n-4}=f'(x_n) 
\end{aligned}
$$

을 얻는다.

</br>

이제 행렬 $\boldsymbol{M}$ 과 벡터 $\boldsymbol{b}$ 를 얻었으므로 $\boldsymbol{Ma}=\boldsymbol{b}$ 를 만족하는 $\boldsymbol{a}$ 를 구할 수 있다. $\boldsymbol{a}$ 는 이 보간법의 각 구간에서의 3차 다항식의 계수를 결정하기 때문에 우리는 보간법을 사용하여 정해진 구간 내의 모든 값을 계산 할 수 있다.


여기에 사용된 모든 보간법은 `interpolation.jl` 에 `Interpolation1D` 객체로 구현되었다.

```julia
using Plots, LaTeXStrings, LinearAlgebra, Plots, SparseArrays, Printf
include("../lib/interpolation.jl")

xp = 0.0:0.75:15.0 # change step to vector
yp = cos.(3 .* xp) .* exp.(-xp/10.0)
yp[8:9]=[-0.15 -0.3]# 
xt = 0.0:0.05:15.0 # change step to vector

interp1=Interpolator1D(xp, yp, :cubic)
interp2=Interpolator1D(xp, yp, :cubic_spline_naturalbc)
interp3=Interpolator1D(xp, yp, :cubic_spline_clampedbc, [0.0, 0.0])

scatter(xp, yp, label = L"\mathrm{Data}", dpi=300)
plot!(xt, interp1.(xt), lw=2, lc=:green, label=L"\mathrm{Cubic}")
plot!(xt, interp2.(xt), lw=2, lc=:red, ls = :dash, label=L"\mathrm{Cubic\;Spline\;with\;natural\;BC}")
plot!(xt, interp3.(xt), lw=2, lc=:blue, ls = :dot, label=L"\mathrm{Cubic\;Spline\;with\;clamped\;BC}")
```

이 결과로 다음의 그래프를 얻었다.

![Cubic Spline Interpolation](figure/test_spline.png){#fig-interpolatino_spline width=100%}

</br>
